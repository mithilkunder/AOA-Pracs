#include <stdio.h>
#include <string.h>

#define MAX_TEXT 1000
#define MAX_PATTERN 100


void removeNewline(char *str) {
    str[strcspn(str, "\n")] = '\0';
}

void naiveSearch(char text[], char pattern[]) {
    int n = strlen(text);
    int m = strlen(pattern);
    int found = 0;

    printf("Searching for \"%s\" in \"%s\"...\n\n", pattern, text);

    for (int i = 0; i <= n - m; i++) {
        int j;

        for (j = 0; j < m; j++) {
            if (text[i + j] != pattern[j])
                break;
        }

        if (j == m) {
            printf("Pattern found at index %d\n", i);
            found = 1;
        }
    }

    if (!found) {
        printf("Pattern not found in the text.\n");
    }
}

int main() {
    char text[MAX_TEXT], pattern[MAX_PATTERN];

    printf("Enter the text: ");
    if (fgets(text, sizeof(text), stdin) == NULL) {
        printf("Error reading text.\n");
        return 1;
    }

    printf("Enter the pattern to search: ");
    if (fgets(pattern, sizeof(pattern), stdin) == NULL) {
        printf("Error reading pattern.\n");
        return 1;
    }

    removeNewline(text);
    removeNewline(pattern);

    naiveSearch(text, pattern);

    return 0;
}
