#include <stdio.h>
#include <limits.h>

#define V 100  // maximum number of vertices

int minKey(int key[], int mstSet[], int n) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < n; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

void printMST(int parent[], int graph[V][V], int n) {
    int total_weight = 0;
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
        total_weight += graph[i][parent[i]];
    }
    printf("Total weight of MST: %d\n", total_weight);
}

void primMST(int graph[V][V], int n) {
    int parent[V];   // Stores MST
    int key[V];      // Used to pick min weight edge
    int mstSet[V];   // Vertices included in MST

    for (int i = 0; i < n; i++)
        key[i] = INT_MAX, mstSet[i] = 0;

    key[0] = 0;       // Start from first vertex
    parent[0] = -1;   // First node is root of MST

    for (int count = 0; count < n - 1; count++) {
        int u = minKey(key, mstSet, n);
        mstSet[u] = 1;

        for (int v = 0; v < n; v++)
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    printMST(parent, graph, n);
}

int main() {
    int n;
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    int graph[V][V];
    printf("Enter the adjacency matrix (0 for no edge):\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    primMST(graph, n);

    return 0;
}

#OUTPUT:
Enter number of vertices: 5
Enter the adjacency matrix (0 for no edge):
0 1 3 0 0
1 0 3 6 0
3 3 0 4 2
0 6 4 0 5
0 0 2 5 0
Edge    Weight
0 - 1   1 
0 - 2   3 
2 - 3   4 
2 - 4   2 
Total weight of MST: 10
