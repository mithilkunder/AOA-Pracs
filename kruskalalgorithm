#include <stdio.h>
#include <stdlib.h>

#define MAX 100
#define INF 99999

typedef struct {
    int u, v, weight;
} Edge;

int parent[MAX], rank[MAX];

void initializeSet(int V) {
    for (int i = 0; i < V; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]);
    return parent[x];
}

void unionSets(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);
    
    if (rootX != rootY) {
        if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
    }
}


int compareEdges(const void *a, const void *b) {
    Edge *e1 = (Edge *)a;
    Edge *e2 = (Edge *)b;

    if (e1->weight < e2->weight) return -1;
    else if (e1->weight > e2->weight) return 1;
    else return 0;
}

void kruskalMST(Edge edges[], int E, int V) {
    qsort(edges, E, sizeof(Edge), compareEdges);

    initializeSet(V);
    int mstWeight = 0;
    int edgesInMST = 0;

    printf("Edges in the MST:\n");
    for (int i = 0; i < E && edgesInMST < V - 1; i++) {
        int u = edges[i].u;
        int v = edges[i].v;

        if (find(u) != find(v)) {
            printf("%d - %d (Weight: %d)\n", u, v, edges[i].weight);
            mstWeight += edges[i].weight;
            unionSets(u, v);
            edgesInMST++;
        }
    }

    printf("Weight of MST: %d\n", mstWeight);
}

int main() {
    int V, E;

    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    Edge edges[E];

    printf("Enter the edges (u v weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].weight);
    }

    kruskalMST(edges, E, V);

    return 0;
}
